//Aplicando lo aprendido 1

//Ejemplo de Pila (Stack)

class Stack{
    //Se define un constructor
    constructor(){
        this.stack = [];
    }

    //Se define los métodos
    //push agrega elementos al final del arreglo
    push(element){
        this.stack.push(element)
        return this.stack
    }
    //elimina el último elemento
    pop(){
        return this.stack.pop()
    }
    //peek te devuelve el último elemento
    peek(){
        return this.stack[this.stack.length - 1]
    }
    //Devuelve el tamaño de la pila
    size(){
        return this.stack.length
    }
    print(){
        console.log(this.stack)
    }
}

/*
const pila = new Stack();
console.log(pila.size());
console.log(pila.push('Jafeht'));
console.log(pila.push('José'));
console.log(pila.push('Marcos'));
console.log(pila.size());
//pila.print()
console.log(pila.peek());
console.log(pila.pop());
console.log(pila.peek());
pila.print()
*/

//Aplicando lo aprendido 2

//Ejemplo de Cola (Queue)

class Queue{
    //Se define un constructor
    constructor(){
        this.queue = [];
    }

    //Se define los métodos
    //push agrega elementos al final del arreglo
    enqueue(element){
        this.queue.push(element)
        return this.queue
    }
    //elimina el último elemento
    dequeue(){
        return this.queue.shift()
    }
    //peek te devuelve el primer elemento
    peek(){
        return this.queue[0]
    }
    //Devuelve el tamaño de la pila
    size(){
        return this.queue.length
    }
    print(){
        console.log(this.queue)
    }
    isEmpty(){
        return this.queue.length === 0;
    }
}

/*
const cola = new Queue();
console.log(cola.enqueue('Jafeht'));
console.log(cola.enqueue('Kelly'));
console.log(cola.enqueue('Maria'));
console.log(cola.dequeue());
cola.print();
console.log(cola.dequeue());
cola.print();
console.log(cola.enqueue('Jafeht'));
console.log(cola.enqueue('Kelly'));
console.log(cola.peek());
console.log(cola.isEmpty());
console.log(cola.dequeue());
console.log(cola.dequeue());
console.log(cola.dequeue());
console.log(cola.isEmpty());
*/

//Aplicando lo aprendido 3
//Ejemplo de matriz
let ejemploArreglo = [20, 'ok',12, true];
/*
console.log(ejemploArreglo[0])
console.log(ejemploArreglo.length)
console.log(ejemploArreglo.push('otroelemento'));
console.log(ejemploArreglo)
console.log(ejemploArreglo.pop())
console.log(ejemploArreglo)
console.log(ejemploArreglo.unshift('otroelemento'));
console.log(ejemploArreglo)
console.log(ejemploArreglo.shift())
console.log(ejemploArreglo)
*/

//Aplicando lo aprendido 4
//Ejemplo de Árboles

class TreeNode {
    //SE define un constructor
    constructor(node){
        this.node = node;
        this.descendants = [];
    }
}

//Creemos algunos elementos

const Abuelo = new TreeNode(10000);
const Padre = new TreeNode(99);
const hijo1 = new TreeNode(100);
const hijo2 = new TreeNode(676);
const hijo3 = new TreeNode(2);

Abuelo.descendants.push(Padre)
Padre.descendants.push(hijo1,hijo2,hijo3)
console.log(Abuelo);
console.log(Padre);